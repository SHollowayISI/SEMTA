function [out] = PhasedSetup(scenario)
%PHASEDSETUP Sets up Phased Array Toolbox system objects for SEMTA
%   Takes scenario.wave and scenario.traj as input and outputs
%   scenario.phased struct containing system objects for Phased Array
%   Toolbox simulation.

%% Unpack Variables

radarsetup = scenario.radarsetup;
multi = scenario.multi;

%% Set up constants

c = physconst('LightSpeed');
lambda = c/radarsetup.f_c;

%% Signal Setup

% Transmit waveform
out.waveform = phased.LinearFMWaveform( ...
    'SampleRate',               radarsetup.f_s, ...
    'DurationSpecification',    'Pulse width', ...
    'PulseWidth',               radarsetup.t_p, ...
    'PRF',                      radarsetup.prf, ...
    'SweepBandwidth',           radarsetup.bw, ...
    'SweepDirection',           'Up', ...
    'SweepInterval',            'Positive', ...
    'OutputFormat',             'Pulses', ...
    'NumPulses',                1);

%% Target & Channel Setup

% Set up target to take RCS value at each object call
out.target = phased.RadarTarget( ...
    ...
    'EnablePolarization',       false, ...
    'MeanRCSSource',            'Input port', ...
    'Model',                    'Nonfluctuating', ...
    'OperatingFrequency',       radarsetup.f_c, ...
    'PropagationSpeed',         c);

% Set up two-way free space path loss
out.target_chan = phased.FreeSpace( ...
    ...
    'PropagationSpeed',         c, ...
    'OperatingFrequency',       radarsetup.f_c, ...
    'TwoWayPropagation',        true, ...
    'SampleRate',               radarsetup.f_s);

%% Transceiver Setup

% Transceiver position and motion
out.radar_plat = phased.Platform( ...
    ...
    'MotionModel',              'Velocity', ...
    'InitialPosition',          multi.radar_pos(:,1), ...
    'Velocity',                 [0;0;0]);

% Set up antenna array parameters
out.antenna = phased.CosineAntennaElement( ...
    ...
    'FrequencyRange',           radarsetup.f_c*[0.9 1.1], ...
    'CosinePower',              [1 185]);

if radarsetup.n_ant == 1
    out.sub_array = out.antenna;
else
    out.sub_array = phased.ULA( ...
        ...
        'Element',                  out.antenna, ...
        'NumElements',              radarsetup.n_ant, ...
        'ArrayAxis',                'y', ...
        'ElementSpacing',           lambda/2);
end
    
out.rx_array = phased.ReplicatedSubarray( ...
    ...
    'Subarray',                 out.sub_array, ...
    'Layout',                   'Custom', ...
    'SubarrayPosition',         [0 0; 0 0; 0 0], ...
    'SubarrayNormal',           [0 0; 0 0], ...
    'SubarraySteering',         'Custom');

% Calculate antenna gain correction
dir = pattern(out.sub_array, radarsetup.f_c, 0, 0, 'Type', 'powerdb', 'Normalize', false);
tx_gain_offset = radarsetup.tx_ant_gain - dir;
rx_gain_offset = radarsetup.rx_ant_gain - dir;

% Set up transmitter parameters
out.transmitter = phased.Transmitter( ...
    'PeakPower',                radarsetup.tx_pow, ...
    'Gain',                     tx_gain_offset, ...
    'InUseOutputPort',          true);

out.radiator = phased.Radiator( ...
    'Sensor',                   out.sub_array, ...
    'PropagationSpeed',         c, ...
    'OperatingFrequency',       radarsetup.f_c, ...
    'CombineRadiatedSignals',   true, ...
    'WeightsInputPort',         true);

% Set up receiver parameters
out.collector = phased.Collector( ...
    'Sensor',                   out.rx_array, ...
    'PropagationSpeed',         c, ...
    'OperatingFrequency',       radarsetup.f_c, ...
    'Wavefront',                'Plane');

% Calculate noise power
noise_power = physconst('boltzmann') * 290 * db2pow(radarsetup.rx_nf) / radarsetup.t_p;

% Set up receiver noise power
out.receiver = phased.ReceiverPreamp( ...
    'Gain',                     rx_gain_offset, ...
    'NoiseMethod',              'Noise power', ...
    'NoisePower',               noise_power);


%% Detection Setup

% Set up CFAR detector
out.CFAR = phased.CFARDetector2D( ...
    'Method',                   'CA', ...
	'ProbabilityFalseAlarm',    radarsetup.Pfa, ...
    'ThresholdFactor',          'Auto', ...
    'GuardBandSize',            radarsetup.num_guard, ...
    'TrainingBandSize',         radarsetup.num_train, ...
    'OutputFormat',             'CUT result');

end

