%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.8 and Fixed-Point Designer 7.0           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function y = RDProcessingFP_fixpt(x, x_ref)
%RDPROCESSINGFP Combined fixed-point processing functions
%   Performs range processing followed by doppler processing in fixed
%   point, used for verification of correct operation of individual fixed
%   point functions.

%% Setup

% Generate output matrices
fm = get_fimath();

y = fi(complex(zeros(1250, 1024, 2)), 1, 32, 25, fm);

%% Range-Doppler processing

% Loop through chirps and perform range processing
for chirp = 1:1024
    for channel = 1:2
        
        y(:,chirp,channel) = RangeProcessingFP(x(:,chirp,channel), x_ref);
        
    end
end

% Loop through range bins and perform Doppler processing
for bin = 1:1250
    for channel = 1:2
        
        y(bin,:,channel) = DopplerProcessingFP(y(bin,:,channel)');
        
    end
end



end

function y = RangeProcessingFP(x, x_ref)
%RANGEPROCESSINGFP Fixed point range processing
%   Takes receieved and reference signals as input, returns correlation
%   along first dimension

%% Set up FFT object

% Instantiate FFT object
fm = get_fimath();

ft = dsp.FFT( ...
    'FFTImplementation',        'Radix-2', ...
    'BitReversedOutput',        false, ...
    'Normalize',                false, ...
    'FFTLengthSource',          'Property', ...
    'FFTLength',                2048, ...
    'WrapInput',                true);

% Instantiate IFFT object
ift = dsp.IFFT( ...
    'FFTImplementation',        'Radix-2', ...
    'Normalize',                false, ...
    'FFTLengthSource',          'Property', ...
    'FFTLength',                2048, ...
    'WrapInput',                true);

%% Perform correlation

% Take FFT of input signal
X_f = fi(ft(x), 1, 32, 43, fm);

% Multiply by reference signal
X_f(:) = X_f .* x_ref;

% Take inverse FFT
y = fi(ift(X_f), 1, 32, 35, fm);

% Remove out of range bins
y = fi(y(1:1250), 1, 32, 35, fm);


end

function y = DopplerProcessingFP(x)
%DOPPLERPROCESSINGFP Fixed point Doppler processing
%   Takes range-processed signal as input, returns FFT

%% Set up FFT object

% Instantiate FFT object
fm = get_fimath();

ft = dsp.FFT( ...
    'FFTImplementation',        'Radix-2', ...
    'BitReversedOutput',        false, ...
    'Normalize',                false, ...
    'FFTLengthSource',          'Property', ...
    'FFTLength',                1024, ...
    'WrapInput',                true);

%% Perform Doppler FFT

% Take FFT of input signal
X_f = fi(ft(x), 1, 32, 25, fm);

% FFT shift signal
y = fi(fftshift(X_f), 1, 32, 25, fm);

end


function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
