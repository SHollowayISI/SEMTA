%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.8 and Fixed-Point Designer 7.0           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [indexList, powerList] = CFARDetectionFP_fixpt(dataCube, ...
    offsetList, maxNumOutputs, threshFactor, ...
    N_rng, N_dop, Ntrain_rng, Ntrain_dop, Nguard_rng, Nguard_dop)
    
    % Initialize output lists to a maximum size
    fm = get_fimath();

    indexList = fi(zeros(fi_toint(maxNumOutputs),1), 0, 32, 0, fm);    
    powerList = fi(zeros(fi_toint(maxNumOutputs),1), 0, 32, 20, fm);
    listCounter = fi(int32(1), 0, 32, 0, fm);

    % Calculate index limits
    R_maxDist = fi(Ntrain_rng + Nguard_rng, 0, 5, 0, fm);
    D_maxDist = fi(Ntrain_dop + Nguard_dop, 0, 3, 0, fm);
    R_limits = fi([fi(R_maxDist + fi(1, 0, 1, 0, fm), 0, 11, 0, fm), N_rng - R_maxDist], 0, 11, 0, fm);
    D_limits = fi([fi(D_maxDist + fi(1, 0, 1, 0, fm), 0, 10, 0, fm), N_dop - D_maxDist], 0, 10, 0, fm);
        
    % Loop through indices to test
    for R_ind = R_limits(1):R_limits(2)
        for D_ind = D_limits(1):D_limits(2)
            
            % Determine linear index of CUT
            linIndex = fi(sub2ind(fi_toint([fi(N_rng, 0, 11, 0, fm), N_dop]), R_ind, D_ind), 0, 32, 0, fm);
            
            % Average over power
            threshold = fi(mean(dataCube(linIndex + offsetList)) * threshFactor, 0, 32, 23, fm);
 
            if dataCube(linIndex) > threshold
                
                % Add entry to list
                indexList(listCounter) = fi(linIndex, 0, 32, 0, fm);
                powerList(listCounter) = fi(dataCube(linIndex), 0, 32, 20, fm);
                listCounter(:) = listCounter + fi(1, 0, 1, 0, fm);
                
                % Break at end of list
                if listCounter > maxNumOutputs
                    return
                end
            end
        end
    end
end



function y = fi_toint(u)
    coder.inline( 'always' );
    if isfi( u )
        nt = numerictype( u );
        s = nt.SignednessBool;
        wl = nt.WordLength;
        y = int32( fi( u, s, wl, 0, hdlfimath ) );
    else
        y = int32( u );
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
